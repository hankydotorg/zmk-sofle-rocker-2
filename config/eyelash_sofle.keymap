#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    td_in_clear: td_in_clear {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_IN_CLEAR";
        #binding-cells = <0>;
        bindings = <&kp I>, <&kp LA(X)>;
    };

    ht_bt: ht_bt {
        compatible = "zmk,behavior-hold-tap";
        label = "HT_BT";
        bindings = <&bt>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "balanced";
    };

    ht_rgb: ht_rgb {
        compatible = "zmk,behavior-hold-tap";
        label = "HT_RGB";
        bindings = <&rgb_ug>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "balanced";
    };

    ht_mt: ht_mt {
        compatible = "zmk,behavior-hold-tap";
        label = "HT_MT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "balanced";
    };

    td_out_clear: td_out_clear {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_OUT_CLEAR";
        #binding-cells = <0>;
        bindings = <&kp O>, <&kp LA(X)>;
    };

    td_select_clear: td_select_clear {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SELECT_CLEAR";
        #binding-cells = <0>;
        bindings = <&kp X>, <&kp RA(X)>;
    };

    td_select_blade: td_select_blade {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SELECT_BLADE";
        #binding-cells = <0>;
        bindings = <&kp A>, <&kp B>;
    };

    td_bkspace_del: td_bkspace_del {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_BKSPACE_DEL";
        #binding-cells = <0>;
        bindings = <&kp BACKSPACE>, <&kp DELETE>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&ht_rgb RGB_TOG LS(GRAVE)  &ht_bt BT_SEL N1 0  &ht_bt BT_SEL N2 1  &ht_bt BT_SEL N3 2  &ht_bt BT_NXT N4  &ht_bt BT_CLR_ALL N5    &kp UP_ARROW     &ht_mt C_BRIGHTNESS_DEC N6  &ht_mt C_BRIGHTNESS_INC N7  &ht_mt K_MUTE N8  &ht_mt C_VOL_DN N9  &ht_mt C_VOL_UP N0  &tog 1
&ht_rgb RGB_EFF TAB        &kp Q               &kp W               &kp E               &kp R             &kp T                   &kp DOWN_ARROW   &kp Y                       &kp U                       &kp I             &kp O               &kp P               &kp DEL
&ht_mt CAPSLOCK MINUS      &kp A               &kp S               &kp D               &kp F             &kp G                   &kp LEFT_ARROW   &kp H                       &kp J                       &kp K             &kp L               &kp SEMI            &kp APOS
&kp LSHFT                  &kp Z               &kp X               &kp C               &kp V             &kp B                   &kp RIGHT_ARROW  &kp N                       &kp M                       &kp COMMA         &kp DOT             &kp FSLH            &kp ENTER
&kp C_MUTE                 &kp LEFT_GUI        &kp LEFT_ALT        &kp LCTRL           &kp SPACE         &kp LEFT_GUI            &kp ENTER        &kp RIGHT_SHIFT             &kp BACKSPACE               &kp MINUS         &kp RIGHT_ALT       &kp RIGHT_GUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "QWERTY";
        };

        layer_1 {
            bindings = <
&trans      &trans  &trans  &trans  &trans  &trans    &mmv MOVE_UP     &kp BACKSPACE  &kp N7   &kp N8    &kp N9     &kp F10    &tog 2
&trans      &trans  &trans  &trans  &trans  &trans    &mmv MOVE_DOWN   &kp ASTERISK   &kp N4   &kp N5    &kp N6     &kp MINUS  &kp LPAR
&trans      &trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT   &kp SLASH      &kp N1   &kp N2    &kp N3     &kp PLUS   &kp RPAR
&trans      &trans  &trans  &trans  &trans  &trans    &mmv MOVE_RIGHT  &kp RGUI       &kp DOT  &kp UP    &kp PRCNT  &kp EQUAL  &kp RETURN
&kp C_MUTE  &trans  &trans  &trans  &trans  &trans    &mkp LCLK        &kp SPACE      &kp N0   &kp LEFT  &kp DOWN   &kp RIGHT
            >;

            display-name = "NUMPAD";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&td_in_clear  &td_out_clear    &kp LG(EQUAL)  &kp LG(MINUS)           &kp LS(Z)     &kp M         &mmv MOVE_UP     &trans         &trans      &trans        &trans     &trans         &kp
&kp           &kp LA(F)        &kp LA(LG(L))  &kp N                   &kp A         &kp D         &mmv MOVE_DOWN   &kp BACKSPACE  &kp SEMI    &kp SPACE     &kp SQT    &kp RS(MINUS)  &kp RS(EQUAL)
&kp           &td_bkspace_del  &kp LGUI       &kp LSHIFT              &kp LEFT_ALT  &kp P         &mmv MOVE_LEFT   &kp RG(B)      &kp J       &kp K         &kp L      &kp RS(LBRC)   &kp RS(RBRC)
&kp           &kp K_UNDO       &kp K_CUT      &ht_mt UP_ARROW K_COPY  &kp K_PASTE   &kp K_REDO    &mmv MOVE_RIGHT  &kp DELETE     &kp PG_UP   &kp UP_ARROW  &kp PG_DN  &trans         &kp
&kp           &kp LEFT         &kp DOWN       &kp RIGHT               &kp J         &kp SPACE     &mkp LCLK        &kp RIGHT_GUI  &kp RSHIFT  &kp LEFT      &kp DOWN   &kp RIGHT
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "RESOLVE";
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
